import subprocess
import time
import threading
import json
import os

# Global dictionary that holds radio configurations for this group (e.g., 320 kbps radios).
# In practice, this could be loaded from the Laravel DB.
radio_config = {}  # Format: { radio_id: { 'source_url': ..., 'mount': ..., 'bitrate': 320, 'password': ..., 'host': ..., 'port': ... } }

# Dictionary mapping radio_id to FFmpeg process.
radio_processes = {}

def start_ffmpeg_process(radio_id, config):
    ffmpeg_command = [
        "ffmpeg",
        "-i", config['source_url'],
        "-c:a", "libmp3lame",
        "-b:a", f"{config['bitrate']}k",
        "-ar", "44100",
        "-f", "mp3",
        f"icecast://source:{config['password']}@{config['host']}:{config['port']}{config['mount']}"
    ]
    print(f"Starting stream for radio {radio_id} with command: {' '.join(ffmpeg_command)}")
    process = subprocess.Popen(ffmpeg_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return process

def restart_ffmpeg_process(radio_id, config):
    # Stop the old process if it exists.
    if radio_processes.get(radio_id):
        print(f"Restarting stream for radio {radio_id}")
        radio_processes[radio_id].terminate()
        radio_processes[radio_id].wait()
    # Start a new process with the updated configuration.
    radio_processes[radio_id] = start_ffmpeg_process(radio_id, config)

def monitor_config_updates():
    global radio_config
    while True:
        # For demonstration, we load the config from a JSON file.
        # Replace this block with your database query logic.
        if os.path.exists('radio_config.json'):
            with open('radio_config.json', 'r') as f:
                new_config = json.load(f)
            # Check for changes in configuration for each radio in this group.
            for radio_id, conf in new_config.items():
                # If a new radio or updated configuration is found, update the mapping.
                if radio_id not in radio_config or radio_config[radio_id] != conf:
                    radio_config[radio_id] = conf
                    restart_ffmpeg_process(radio_id, conf)
        time.sleep(10)  # Check every 10 seconds.

if __name__ == "__main__":
    # Initial load of configurations.
    if os.path.exists('radio_config.json'):
        with open('radio_config.json', 'r') as f:
            radio_config = json.load(f)
    
    # Start initial FFmpeg processes for each radio in this group.
    for radio_id, conf in radio_config.items():
        radio_processes[radio_id] = start_ffmpeg_process(radio_id, conf)
    
    # Start a thread to monitor configuration updates.
    threading.Thread(target=monitor_config_updates, daemon=True).start()

    # Main loop: monitor the processes and restart any that terminate unexpectedly.
    try:
        while True:
            for radio_id, proc in list(radio_processes.items()):
                if proc.poll() is not None:
                    print(f"Stream for radio {radio_id} terminated unexpectedly. Restarting...")
                    radio_processes[radio_id] = start_ffmpeg_process(radio_id, radio_config[radio_id])
            time.sleep(5)
    except KeyboardInterrupt:
        print("Shutting down streams...")
        for proc in radio_processes.values():
            proc.terminate()
